using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Test_CS : MonoBehaviour
{
    //유니티 C언어 기초 마무리 코딩테스트 답안입니다.




    //[1] 정수형 변수 'A'를 사용할 것입니다. (초기화 값은 문제에 따라 변경될 수 있습니다.)
    int A;

    //[2] 정수형 변수 'B'를 사용할 것입니다. (초기화 값은 문제에 따라 변경될 수 있습니다.)
    int B;

    //[3] 정수형 변수 'Result'를 사용할 것입니다. (초기화 값은 문제에 따라 변경될 수 있습니다.)
    int Result;

    //[4] 반복문 문제에서는 반복문 내에서 사용할 지역변수 int Num ~ int Num_9 를 따로 선언하겠습니다.



    void Start()
    {
        //[ 1번 예제 { 조건문(기본) } ]
        //
        //조건문을 활용하여 'A는 1000의 값을 초과한다' 조건식을 만들고
        //'A'의 값이 조건식을 만족하도록 만드세요.
        print("1번 문제 출력 결과입니다.");

        A = 1001; // or 1001 ~ 

        if(A > 1000)
        {
            print("A는 1000을 초과한다. A의 값 = " + A);
        }







        //[ 2번 예제 { 조건문(논리 연산자 기초) } ]
        //
        //1번 예제를 응용하여 'A는 1000의 값을 초과하는 동시에 1005 미만이다' 조건식을 만들고
        //'A'의 값이 조건식을 만족하도록 만드세요.
        print("2번 문제 출력 결과입니다.");

        A = 1001; // or 1001 ~ 1004

        if(A > 1000 && A < 1005)
        {
            print("A는 1000의 값을 초과하는 동시에 1005 미만이다. A의 값 = " + A);
        }







        //   [ 3번 예제 { 조건문(논리 연산자 활용) } ]

        //1번 예제를 응용하여
        //'A는 1000의 값을 초과하는 동시에 1005 미만이거나,
        //또는 1002를 초과하는 동시에 1004 이하이다.' 조건식을 만들고
        //'A'의 값이 조건식을 만족하도록 만드세요.​
        print("3번 문제 출력 결과입니다.");

        A = 1003;  // or 1004

        if (A > 1000 && A < 1005 || A > 1002 || A <= 1004)
        {
            print("A는 1000의 값을 초과하는 동시에 1005 미만이거나, " +
                "1002를 초과하는 동시에 1004 이하이다. A = " + A);
        }







        //[ 4번 예제 { 반복문(2중 반복문) } ]
        //
        //반복문을 활용하여 1단부터 9단까지의 구구단을
        //서순에 맞게 출력해보시오.
        print("4번 문제 출력 결과입니다.");


        for (int Num = 1; Num < 10; Num++)
        {
            for(int Num_1 = 1; Num_1 < 10; Num_1++)
            {
                print(Num + " X " + Num_1 + " = " + (Num * Num_1));
            }
        }







        //[ 5번 예제 { 반복문 ( 조건문 활용 ) } ]
        //
        //반복문과 조건문을 활용하여 1부터 1000까지의 숫자들 중
        //[짝수]만 더한 총 합을 구하시오.
        print("5번 문제 출력 결과입니다.");

        for(int Num = 1; Num < 1001; Num++)
        {
            if(Num % 2 == 0) //Num을 2로 나눈 나머지값이 0일 경우. = 짝수.
            {
                Result += Num;  // Result = Result + Num 과 같은 의미입니다.           
            }
        }

        print("1부터 1000까지 숫자들 중 짝수만 더한 값은 " + Result + " 입니다.");

        Result = 0;








        //[ 6번 예제 { 반복문(반복 중단점 체크) } ]
        //
        //반복문을 활용하여 1부터 1000까지의 숫자를 구하고,
        //반복문 지역변수 'Num'을 60으로 나눈 값이 3일 경우
        //반복문을 종료하도록 코드를 작성해봅시다.
        print("6번 문제 출력 결과입니다.");

        for (int Num = 1; Num < 1001; Num++)
        {
            if (Num / 60 == 3)
            {
                print("브레이크 발동!  Num / 60 = " + (Num / 60));

                break;
                //break문은 for문을 비롯한 모든 반복문에서 사용되며,
                //호출되는 시점에 남은 반복 횟수에 상관없이 가장 가까운 반복문을
                //강제로 탈출하게 됩니다.
            }
        }








        //[ 7번 예제 { 함수(기초) } ]
        //
        //반환값도 매개변수도 없는 'Add'함수를 선언하고,
        //실행 시 'A+B'의 값을 콘솔에 출력하는 코드를 작성해봅시다.
        //단, A와 B의 값이 재할당되면 안됩니다.
        //( 함수 예제의 함수 정의는 [ void Start()함수 하단 ]에 위치합니다. [ 274번 줄부터 ])
        print("7번 문제 출력 결과입니다.");

        //A와 B의 값을 더할 것이므로 원하는 값을 할당해주겠습니다.
        A = 10; 
        B = 30;

        Add(); //그리고 Add 함수 내부에서 출력하겠습니다.








        //[ 8번 예제 { 함수(반환값) } ]
        //
        //정수값을 반환하는 'Add_2'함수를 선언하고,
        //'A+B'의 값을 반환값으로 전달받아 Result 함수에 할당해준 뒤,
        //Start() 함수 내부에서 Result 변수의 값이 정상적으로 할당되었는지 출력해보겠습니다.
        print("8번 문제 출력 결과입니다.");

        //A와 B의 값을 더할 것이므로 원하는 값을 할당해주겠습니다.
        A = 10;  
        B = 15;

        Result​ = Add_2();

        print("Result = " + Result);

        //변수사용이 끝났으므로 다음 예제를 위해 0을 다시 할당해주었습니다.
        A = 0;
        B = 0;
        Result = 0;
        







        //[ 9번 예제 { 함수(매개변수) } ]

        //정수값을 반환하고 정수형 매개변수를 2개 지닌 'Add_3' 함수를 선언하고,
        //(이 때, 정수형 매개변수의 이름은 각각 C, D 로 한다. )
        //매개변수 C와 D의 합을 반환값으로 전달받아 Result 함수에 할당해준 뒤,
        //Start() 함수 내부에서 Result 변수의 값이 정상적으로 할당되었는지 출력해보겠습니다.
        print("9번 문제 출력 결과입니다.");

        Result = Add_3(100, 150);

        print("Result의 값은 = " + Result);

        Result = 0;







        //[ 10번 예제 { 배열(선언) } ]

        //int형 배열 'INT_Array'를 선언한 뒤,
        //본인이 편한 방법으로 int형 10개의 공간을 할당해보겠습니다.
        print("10번 문제 출력 결과입니다.");

        int[] INT_Array = new int[10];
        //또는 int[] INT_Array = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

        print("INT_Array의 배열 총 길이 : " + INT_Array.Length);








        //[ 11번 예제 { 배열(요소접근) } ]
        //
        //'10번 예제' 에서 선언했던 'INT_Array'와 반복문을 활용해
        //'INT_Array'의 길이만큼 반복문을 실행하고
        //'INT_Array'의 각 요소에 차례대로 10부터 100까지(10, 20, 30, 40....100)의
        //정수값을 할당해보도록 합시다.
        print("11번 문제 출력 결과입니다.");

        for(int Num = 1; Num < 11; Num++)
        {
            INT_Array[Num - 1] = (Num * 10);
            print("INT_Array의 " + Num + " 번째 요소값은 " + INT_Array[Num - 1]);
        }








        //[ 12번 예제 { 배열(선언) } ]
        //
        //'INT_Array'배열과 반복문을 활용해
        //'11번 예제' 에서 할당했던 배열의 모든 요소들의 합을 구해
        //'Result'에 할당하고 'Result'의 값을 출력해보도록 합시다.
        print("12번 문제 출력 결과입니다.");

        for (int Num = 0; Num < INT_Array.Length; Num++)
        {
            Result += INT_Array[Num];
            print("INT_Array의 " +(Num + 1) + "번째 요소까지의 합은 " + Result + " 입니다.");
        }
    }




    void Add()  // 7번 예제 함수정의
    {
        print("A의 값 = " + A + " / B의 값 = " + B + " / A + B = " + (A + B));
    }

    int Add_2() // 8번 예제 함수정의
    {
        return A + B;
    }

    int Add_3(int C, int D)
    {       
        return C + D;
    }
}
