using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Basic_Class
{
    //MonoBehaviour 란?
    // ㄴ 이 스크립트는 객체에 컴포넌트로써 적용된 상태에서만
    //    작동하겠다.

    //★ 클래스 기초
    //ㄴ 클래스란?

    //개발자들은 게임을 제작할 때, 여러 객체들을 생성하고, 관리해야한다.
    //여기서 예를 들어 [몬스터] 객체가 존재한다고 가정해보자.
    //[몬스터] 객체는 각각 '체력','공격력','이름' 등등
    //객체별로 [몬스터]라는 타입은 동일하지만, 각 요소정보는
    //모두 다를 것이다.

    //이런 객체를 생성할 때, 일일이 모든 요소를 스크립트에 선언하고
    //초기화하는 방식에 효율적이지 못하다고 느끼는 사람들이 존재할 것이다.
    //그런 문제를 해결하기 위해, 우리는
    //[Class]라는 일종의 [객체 도장]형태로 요소와 함수들을 묶어
    //필요할때 언제든 원하는 객체를 찍어낼 수 있도록 [객체 도장]을 만들 것이다.
}


//새로운 커스텀 클래스 작성하기.

//System.Serializable
// ㄴ 기본적으로 커스텀 클래스는 인스펙터에 각 요소값이
//    표기되지 않는다. 이런 문제를 완화하여, 커스텀 클래스 타입으로
//    객체를 인스턴스화 했을 경우, 각 요소들을 인스펙터에 표기하기 위해
//    필요한 명령어이다.

[System.Serializable]
public class Player //클래스 선언 기본형.
{
    //[1] 클래스의 {코드 몸통}이 담당하는 일.
    // ㄴ 커스텀 클래스가 가질 각 요소와, 고유 함수 데이터를 
    //    입력받을 공간.

    public int HP; //플레이어 체력
    public int ATK; //플레이어 공격력
    public float Speed; //플레이어 이동속도
    public string Name; //플레이어 이름
    // ㄴ 클래스의 요소
    // ㄴ 해당 클래스 타입을 이용하여 객체를 생성했을 경우
    //    객체가 기본적으로 지닐 요소정보

    //[2] 클래스 생성자 [ 유사한 기능 : void Start() ]
    // ㄴ 생성자는 데이터 타입을 가지지 않고, 리턴값도 없는 함수이며,
    // 오로지, 클래스 타입 객체가 [생성(인스턴스화)될 때] 최초 한번 자동으로
    // 실행되는 함수이다.
    
    // 주의점: 생성자 함수는 클래스와 이름이 같다.
    public Player(int HP, int ATK, float Speed, string Name) //생성자 기본 선언.
    {
        //Player 클래스 커스텀 생성자에서는
        //파라메터로 각 요소값을 받아와서 해당 객체에 할당해주는
        //코드를 작성할 것이다.

        this.HP = HP;
        this.ATK = ATK;
        this.Speed = Speed;
        this.Name = Name;
        //[3] this 키워드
        // ㄴ 내부적으로 자기 자신을 직접 가르키는 키워드로, 
        //    해당 클래스가 가지고 있는 요소에 직접 접근 할 수 있다.
    }

    public void Set_Status()
    {
        //함수 실행시, 객체의 모든 요소값을 출력해주는 함수
        //이 함수는 커스텀 클래스 'Player' 타입으로 생성된 객체라면
        //자유롭게 호출 가능하다.
        Debug.Log("HP = " + HP);
        Debug.Log("ATK = " + ATK);
        Debug.Log("Speed = " + Speed);
        Debug.Log("Name = " + Name);

    }

}

